import 'dart:math' as math;

// Block

enum BlockTypeFlag {
  none(0),

  // anonymous block generated by hatching, associative dimensioning,
  // other internal operations, or an application
  anonymous(1),

  // this bit is not set if the block has any attribute definitions that
  // are constant, or has no attribute definitions at all
  nonConstant(2),

  // external referenced
  xref(4),
  xrefOverlay(8),
  externallyDependent(16),

  // resolved external reference, or dependent of an external reference
  resolvedOrDependent(32),

  // referenced external reference
  referencedXref(64);

  const BlockTypeFlag(this.code);

  final int code;
}

// Color

enum ColorCode {
  byBlock(0),
  byLayer(256);

  const ColorCode(this.code);

  final int code;
}

const underterminedBlockColor = -1;

// Config

const splineSubdivision = 4;
const tesselationAngle = math.pi / 24;

// Dimension

// https://help.autodesk.com/view/OARX/2023/ENU/?guid=GUID-EDD54EAC-A339-4EBA-AEA6-EC8066505E2B
enum DimensionType {
  rotated(0),
  aligned(1),
  angular(2),
  diameter(3),
  radius(4),
  angular3Point(5),
  ordinate(6),
  referenceIsExclusive(32),
  isOrdinateXTypeFlag(64),
  isCustomTextPositionFlag(128);

  const DimensionType(this.code);

  final int code;
}

enum AttachmentPoint {
  topLeft(1),
  topCenter(2),
  topRight(3),
  middleLeft(4),
  middleCenter(5),
  middleRight(6),
  bottomLeft(7),
  bottomCenter(8),
  bottomRight(9);

  const AttachmentPoint(this.code);

  final int code;
}

enum DimensionTextLineSpacing {
  atLeast(1),
  exact(2);

  const DimensionTextLineSpacing(this.code);

  final int code;
}

enum DimensionTextVertical {
  center(0),
  above(1),
  outside(2),
  jIS(3),
  below(4);

  const DimensionTextVertical(this.code);

  final int code;
}

enum DimensionZeroSuppression {
  feet(0),
  none(1),
  inch(2),
  feetAndInch(3),
  leading(4),
  trailing(8),
  leadingAndTrailing(12);

  const DimensionZeroSuppression(this.code);

  final int code;
}

enum DimensionZeroSuppressionAngular {
  none(0),
  leading(1),
  trailing(2),
  leadingAndTrailing(3);

  const DimensionZeroSuppressionAngular(this.code);

  final int code;
}

enum DimensionTextHorizontal {
  center(0),
  left(1),
  right(2),
  overFirst(3),
  overSecond(4);

  const DimensionTextHorizontal(this.code);

  final int code;
}

enum DimensionToleranceTextVertical {
  bottom(0),
  center(1),
  top(2);

  const DimensionToleranceTextVertical(this.code);

  final int code;
}

// Hatch

enum HatchSolidFill {
  patternFill(0),
  solidFill(1);

  const HatchSolidFill(this.code);

  final int code;
}

enum HatchAssociativity {
  nonAssociative(0), // For MPolygon LacksSolidFill
  associative(1); // For MPolygon HasSolidFill

  const HatchAssociativity(this.code);

  final int code;
}

enum HatchStyle {
  normal(0), // Odd parity area
  outer(1), // Outermost area
  ignore(2); // Entire area

  const HatchStyle(this.code);

  final int code;
}

enum HatchPatternType {
  userDefined(0),
  predefined(1),
  custom(2); // ?

  const HatchPatternType(this.code);

  final int code;
}

enum HatchBoundaryAnnotation {
  notAnnotated(0),
  annotated(1);

  const HatchBoundaryAnnotation(this.code);

  final int code;
}

enum HatchGradientFlag {
  solid(0),
  gradient(1);

  const HatchGradientFlag(this.code);

  final int code;
}

enum HatchGradientColorFlag {
  twoColor(0),
  oneColor(1);

  const HatchGradientColorFlag(this.code);

  final int code;
}

enum BoundaryPathTypeFlag {
  defaults(0),
  external(1),
  polyline(2),
  derived(4),
  textbox(8),
  outermost(16);

  const BoundaryPathTypeFlag(this.code);

  final int code;
}

enum BoundaryPathEdgeType {
  line(1),
  circular(2),
  elliptic(3),
  spline(4);

  const BoundaryPathEdgeType(this.code);

  final int code;
}

// Header

const defaultDxfHeaderVariables = <String, Object>{
  'DRAGVS': 'NULL',
  'INTERFERECOLOR': 1,
  'INTERFEREOBJVS': 'Conceptual',
  'INTERFEREVPVS': '3d Wireframe',
  'OBSLTYPE': ObscuredLineTypes.off,
  'SHADEDIF': 70,
};

// Lineweight

enum ReservedLineweight {
  standard(-3),
  byLayer(-2),
  byBlock(-1);

  const ReservedLineweight(this.code);

  final int code;
}

// Measurement

enum Measurement {
  english(0),
  metric(1);

  const Measurement(this.code);

  final int code;
}

// ObscuredLineTypes
/// Specifies the linetype of obscured lines.
/// Obscured linetypes are independent of zoom level,
/// unlike standard object linetypes.
///
/// Value 0 turns off display of obscured lines and is the default
///
enum ObscuredLineTypes {
  off(0),
  solid(1),
  dashed(2),
  dotted(3),
  shotDash(4),
  mediumDash(5),
  longDash(6),
  doubleShortDash(7),
  doubleMediumDash(8),
  doubleLongDash(9),
  doubleMediumLongDash(10),
  sparseDot(11);

  const ObscuredLineTypes(this.code);

  final int code;
}

// Scene

/// Use 16-bit indices for indexed geometry. */
const indexedChunkSize = 0x10000;

// Viewport

enum ViewportStatusFlag {
  perspectiveMode(0x1),
  frontClipping(0x2),
  backClipping(0x4),
  ucsFollow(0x8),
  frontClipNotAtEye(0x10),
  ucsIconVisibility(0x20),
  ucsIconAtOrigin(0x40),
  fastZoom(0x80),
  snapMode(0x100),
  gridMode(0x200),
  isometricSnapStyle(0x400),
  hidePlotMode(0x800),
  kIsoPairTop(0x1000),
  kIsoPairRight(0x2000),
  viewportZoomLocking(0x4000),
  unused(0x8000),
  nonRectangularClipping(0x10000),
  viewportOff(0x20000),
  gridBeyondDrawingLimits(0x40000),
  adaptiveGridDisplay(0x80000),
  subdivisionBelowSpacing(0x100000),
  gridFollowsWorkplane(0x200000);

  const ViewportStatusFlag(this.code);

  final int code;
}

enum RenderMode {
  optimized2D(0), // classic 2D
  wireframe(1),
  hiddenLine(2),
  flatShaded(3),
  gouraudShaded(4),
  flatShadedWithWireframe(5),
  gouraudShadedWithWireframe(6);

  const RenderMode(this.code);

  final int code;
}

// // viewport가 개별 ucs를 가지고 있는지 여부
enum UCSPerViewport {
  ucsUnchanged(0),
  hasOwnUcs(1);

  const UCSPerViewport(this.code);

  final int code;
}

enum OrthographicType {
  nonOrthographic(0),
  top(1),
  bottom(2),
  front(3),
  back(4),
  left(5),
  right(6);

  const OrthographicType(this.code);

  final int code;
}

enum ShadePlotMode {
  asDisplayed(0),
  wireframe(1),
  hidden(2),
  rendered(3);

  const ShadePlotMode(this.code);

  final int code;
}

enum DefaultLightingType {
  oneDistantLight(0),
  twoDistantLights(1);

  const DefaultLightingType(this.code);

  final int code;
}
